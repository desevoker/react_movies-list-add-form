{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","services/validation.ts","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","isValid","newValue","errorMessage","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","URL_PATTERN","isValidUrl","url","test","EMPTY_VALUE","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isFilledCorrectly","onSubmit","preventDefault","currentCount","disabled","App","moviesFromServer","setMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a76f4ae4.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isValid?: (newValue: string) => boolean,\n  errorMessage?: string,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  isValid = (newValue) => !!newValue,\n  errorMessage = `${label} is required`,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [touched, setTouched] = useState(false);\n\n  const hasError = touched && required && !isValid(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line max-len\nconst URL_PATTERN = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport function isValidUrl(url: string): boolean {\n  return URL_PATTERN.test(url);\n}\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { isValidUrl } from '../../services/validation';\n\nconst EMPTY_VALUE = '';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState(EMPTY_VALUE);\n  const [description, setDescription] = useState(EMPTY_VALUE);\n  const [imgUrl, setImgUrl] = useState(EMPTY_VALUE);\n  const [imdbUrl, setImdbUrl] = useState(EMPTY_VALUE);\n  const [imdbId, setImdbId] = useState(EMPTY_VALUE);\n\n  const isFilledCorrectly = !!title\n                         && !!imdbId\n                         && isValidUrl(imgUrl)\n                         && isValidUrl(imdbUrl);\n\n  const reset = () => {\n    setTitle(EMPTY_VALUE);\n    setDescription(EMPTY_VALUE);\n    setImgUrl(EMPTY_VALUE);\n    setImdbUrl(EMPTY_VALUE);\n    setImdbId(EMPTY_VALUE);\n\n    setCount(currentCount => currentCount + 1);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!isFilledCorrectly) {\n      return;\n    }\n\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    reset();\n  };\n\n  return (\n    <form\n      key={count}\n      className=\"NewMovie\"\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newValue) => setTitle(newValue)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newValue) => setDescription(newValue)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(newValue) => setImgUrl(newValue)}\n        isValid={isValidUrl}\n        errorMessage=\"Image URL is not valid URL\"\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(newValue) => setImdbUrl(newValue)}\n        isValid={isValidUrl}\n        errorMessage=\"Imdb URL is not valid URL\"\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newValue) => setImdbId(newValue)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isFilledCorrectly}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\nimport './App.scss';\n\nimport moviesFromServer from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}